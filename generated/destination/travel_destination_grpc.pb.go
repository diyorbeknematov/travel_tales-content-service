// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: travel_destination.proto

package destination

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelDestinationServiceClient is the client API for TravelDestinationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelDestinationServiceClient interface {
	ListTravelDestnations(ctx context.Context, in *ListDetinationRequest, opts ...grpc.CallOption) (*ListDetinationResponse, error)
	GetTravelDestination(ctx context.Context, in *GetDestinationRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error)
	GetTrendDestinations(ctx context.Context, in *GetTrendDestinationRequest, opts ...grpc.CallOption) (*GetTrendDestinationResponse, error)
}

type travelDestinationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelDestinationServiceClient(cc grpc.ClientConnInterface) TravelDestinationServiceClient {
	return &travelDestinationServiceClient{cc}
}

func (c *travelDestinationServiceClient) ListTravelDestnations(ctx context.Context, in *ListDetinationRequest, opts ...grpc.CallOption) (*ListDetinationResponse, error) {
	out := new(ListDetinationResponse)
	err := c.cc.Invoke(ctx, "/travel_destination.TravelDestinationService/ListTravelDestnations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelDestinationServiceClient) GetTravelDestination(ctx context.Context, in *GetDestinationRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error) {
	out := new(GetDestinationResponse)
	err := c.cc.Invoke(ctx, "/travel_destination.TravelDestinationService/GetTravelDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelDestinationServiceClient) GetTrendDestinations(ctx context.Context, in *GetTrendDestinationRequest, opts ...grpc.CallOption) (*GetTrendDestinationResponse, error) {
	out := new(GetTrendDestinationResponse)
	err := c.cc.Invoke(ctx, "/travel_destination.TravelDestinationService/GetTrendDestinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelDestinationServiceServer is the server API for TravelDestinationService service.
// All implementations must embed UnimplementedTravelDestinationServiceServer
// for forward compatibility
type TravelDestinationServiceServer interface {
	ListTravelDestnations(context.Context, *ListDetinationRequest) (*ListDetinationResponse, error)
	GetTravelDestination(context.Context, *GetDestinationRequest) (*GetDestinationResponse, error)
	GetTrendDestinations(context.Context, *GetTrendDestinationRequest) (*GetTrendDestinationResponse, error)
	mustEmbedUnimplementedTravelDestinationServiceServer()
}

// UnimplementedTravelDestinationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTravelDestinationServiceServer struct {
}

func (UnimplementedTravelDestinationServiceServer) ListTravelDestnations(context.Context, *ListDetinationRequest) (*ListDetinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTravelDestnations not implemented")
}
func (UnimplementedTravelDestinationServiceServer) GetTravelDestination(context.Context, *GetDestinationRequest) (*GetDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravelDestination not implemented")
}
func (UnimplementedTravelDestinationServiceServer) GetTrendDestinations(context.Context, *GetTrendDestinationRequest) (*GetTrendDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendDestinations not implemented")
}
func (UnimplementedTravelDestinationServiceServer) mustEmbedUnimplementedTravelDestinationServiceServer() {
}

// UnsafeTravelDestinationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelDestinationServiceServer will
// result in compilation errors.
type UnsafeTravelDestinationServiceServer interface {
	mustEmbedUnimplementedTravelDestinationServiceServer()
}

func RegisterTravelDestinationServiceServer(s grpc.ServiceRegistrar, srv TravelDestinationServiceServer) {
	s.RegisterService(&TravelDestinationService_ServiceDesc, srv)
}

func _TravelDestinationService_ListTravelDestnations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelDestinationServiceServer).ListTravelDestnations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_destination.TravelDestinationService/ListTravelDestnations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelDestinationServiceServer).ListTravelDestnations(ctx, req.(*ListDetinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelDestinationService_GetTravelDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelDestinationServiceServer).GetTravelDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_destination.TravelDestinationService/GetTravelDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelDestinationServiceServer).GetTravelDestination(ctx, req.(*GetDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelDestinationService_GetTrendDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelDestinationServiceServer).GetTrendDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_destination.TravelDestinationService/GetTrendDestinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelDestinationServiceServer).GetTrendDestinations(ctx, req.(*GetTrendDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TravelDestinationService_ServiceDesc is the grpc.ServiceDesc for TravelDestinationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelDestinationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "travel_destination.TravelDestinationService",
	HandlerType: (*TravelDestinationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTravelDestnations",
			Handler:    _TravelDestinationService_ListTravelDestnations_Handler,
		},
		{
			MethodName: "GetTravelDestination",
			Handler:    _TravelDestinationService_GetTravelDestination_Handler,
		},
		{
			MethodName: "GetTrendDestinations",
			Handler:    _TravelDestinationService_GetTrendDestinations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "travel_destination.proto",
}
