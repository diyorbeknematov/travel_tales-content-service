// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: travel_stories.proto

package stories

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelStoriesServiceClient is the client API for TravelStoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelStoriesServiceClient interface {
	CreateTravelStory(ctx context.Context, in *CreateTravelStoryRequest, opts ...grpc.CallOption) (*CreateTravelStoryResponse, error)
	UpdateTravelStory(ctx context.Context, in *UpdateTravelStoryRequest, opts ...grpc.CallOption) (*UpdateTravelStoryResponse, error)
	DeleteTravelStory(ctx context.Context, in *DeleteTravelStoryRequest, opts ...grpc.CallOption) (*DeleteTravelStoryResponse, error)
	ListTravelStory(ctx context.Context, in *ListTravelStoryRequest, opts ...grpc.CallOption) (*ListTravelStoryResponse, error)
	GetTravelStory(ctx context.Context, in *GetTravelStoryRequest, opts ...grpc.CallOption) (*GetTravelStoryResponse, error)
	AddCommment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error)
	CountStories(ctx context.Context, in *CountStoriesRequest, opts ...grpc.CallOption) (*CountStoriesResponse, error)
	CountLikes(ctx context.Context, in *CountLikesRequest, opts ...grpc.CallOption) (*CountLikesResponse, error)
	CountComments(ctx context.Context, in *CountCommentsRequest, opts ...grpc.CallOption) (*CountCommentsResponse, error)
}

type travelStoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelStoriesServiceClient(cc grpc.ClientConnInterface) TravelStoriesServiceClient {
	return &travelStoriesServiceClient{cc}
}

func (c *travelStoriesServiceClient) CreateTravelStory(ctx context.Context, in *CreateTravelStoryRequest, opts ...grpc.CallOption) (*CreateTravelStoryResponse, error) {
	out := new(CreateTravelStoryResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/CreateTravelStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) UpdateTravelStory(ctx context.Context, in *UpdateTravelStoryRequest, opts ...grpc.CallOption) (*UpdateTravelStoryResponse, error) {
	out := new(UpdateTravelStoryResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/UpdateTravelStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) DeleteTravelStory(ctx context.Context, in *DeleteTravelStoryRequest, opts ...grpc.CallOption) (*DeleteTravelStoryResponse, error) {
	out := new(DeleteTravelStoryResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/DeleteTravelStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) ListTravelStory(ctx context.Context, in *ListTravelStoryRequest, opts ...grpc.CallOption) (*ListTravelStoryResponse, error) {
	out := new(ListTravelStoryResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/ListTravelStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) GetTravelStory(ctx context.Context, in *GetTravelStoryRequest, opts ...grpc.CallOption) (*GetTravelStoryResponse, error) {
	out := new(GetTravelStoryResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/GetTravelStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) AddCommment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/AddCommment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error) {
	out := new(AddLikeResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) CountStories(ctx context.Context, in *CountStoriesRequest, opts ...grpc.CallOption) (*CountStoriesResponse, error) {
	out := new(CountStoriesResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/CountStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) CountLikes(ctx context.Context, in *CountLikesRequest, opts ...grpc.CallOption) (*CountLikesResponse, error) {
	out := new(CountLikesResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/CountLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelStoriesServiceClient) CountComments(ctx context.Context, in *CountCommentsRequest, opts ...grpc.CallOption) (*CountCommentsResponse, error) {
	out := new(CountCommentsResponse)
	err := c.cc.Invoke(ctx, "/travel_stories.TravelStoriesService/CountComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelStoriesServiceServer is the server API for TravelStoriesService service.
// All implementations must embed UnimplementedTravelStoriesServiceServer
// for forward compatibility
type TravelStoriesServiceServer interface {
	CreateTravelStory(context.Context, *CreateTravelStoryRequest) (*CreateTravelStoryResponse, error)
	UpdateTravelStory(context.Context, *UpdateTravelStoryRequest) (*UpdateTravelStoryResponse, error)
	DeleteTravelStory(context.Context, *DeleteTravelStoryRequest) (*DeleteTravelStoryResponse, error)
	ListTravelStory(context.Context, *ListTravelStoryRequest) (*ListTravelStoryResponse, error)
	GetTravelStory(context.Context, *GetTravelStoryRequest) (*GetTravelStoryResponse, error)
	AddCommment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error)
	CountStories(context.Context, *CountStoriesRequest) (*CountStoriesResponse, error)
	CountLikes(context.Context, *CountLikesRequest) (*CountLikesResponse, error)
	CountComments(context.Context, *CountCommentsRequest) (*CountCommentsResponse, error)
	mustEmbedUnimplementedTravelStoriesServiceServer()
}

// UnimplementedTravelStoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTravelStoriesServiceServer struct {
}

func (UnimplementedTravelStoriesServiceServer) CreateTravelStory(context.Context, *CreateTravelStoryRequest) (*CreateTravelStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTravelStory not implemented")
}
func (UnimplementedTravelStoriesServiceServer) UpdateTravelStory(context.Context, *UpdateTravelStoryRequest) (*UpdateTravelStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTravelStory not implemented")
}
func (UnimplementedTravelStoriesServiceServer) DeleteTravelStory(context.Context, *DeleteTravelStoryRequest) (*DeleteTravelStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTravelStory not implemented")
}
func (UnimplementedTravelStoriesServiceServer) ListTravelStory(context.Context, *ListTravelStoryRequest) (*ListTravelStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTravelStory not implemented")
}
func (UnimplementedTravelStoriesServiceServer) GetTravelStory(context.Context, *GetTravelStoryRequest) (*GetTravelStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravelStory not implemented")
}
func (UnimplementedTravelStoriesServiceServer) AddCommment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommment not implemented")
}
func (UnimplementedTravelStoriesServiceServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedTravelStoriesServiceServer) AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedTravelStoriesServiceServer) CountStories(context.Context, *CountStoriesRequest) (*CountStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountStories not implemented")
}
func (UnimplementedTravelStoriesServiceServer) CountLikes(context.Context, *CountLikesRequest) (*CountLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLikes not implemented")
}
func (UnimplementedTravelStoriesServiceServer) CountComments(context.Context, *CountCommentsRequest) (*CountCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComments not implemented")
}
func (UnimplementedTravelStoriesServiceServer) mustEmbedUnimplementedTravelStoriesServiceServer() {}

// UnsafeTravelStoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelStoriesServiceServer will
// result in compilation errors.
type UnsafeTravelStoriesServiceServer interface {
	mustEmbedUnimplementedTravelStoriesServiceServer()
}

func RegisterTravelStoriesServiceServer(s grpc.ServiceRegistrar, srv TravelStoriesServiceServer) {
	s.RegisterService(&TravelStoriesService_ServiceDesc, srv)
}

func _TravelStoriesService_CreateTravelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTravelStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).CreateTravelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/CreateTravelStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).CreateTravelStory(ctx, req.(*CreateTravelStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_UpdateTravelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTravelStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).UpdateTravelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/UpdateTravelStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).UpdateTravelStory(ctx, req.(*UpdateTravelStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_DeleteTravelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTravelStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).DeleteTravelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/DeleteTravelStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).DeleteTravelStory(ctx, req.(*DeleteTravelStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_ListTravelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTravelStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).ListTravelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/ListTravelStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).ListTravelStory(ctx, req.(*ListTravelStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_GetTravelStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTravelStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).GetTravelStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/GetTravelStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).GetTravelStory(ctx, req.(*GetTravelStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_AddCommment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).AddCommment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/AddCommment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).AddCommment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_CountStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).CountStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/CountStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).CountStories(ctx, req.(*CountStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_CountLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).CountLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/CountLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).CountLikes(ctx, req.(*CountLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelStoriesService_CountComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelStoriesServiceServer).CountComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel_stories.TravelStoriesService/CountComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelStoriesServiceServer).CountComments(ctx, req.(*CountCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TravelStoriesService_ServiceDesc is the grpc.ServiceDesc for TravelStoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelStoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "travel_stories.TravelStoriesService",
	HandlerType: (*TravelStoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTravelStory",
			Handler:    _TravelStoriesService_CreateTravelStory_Handler,
		},
		{
			MethodName: "UpdateTravelStory",
			Handler:    _TravelStoriesService_UpdateTravelStory_Handler,
		},
		{
			MethodName: "DeleteTravelStory",
			Handler:    _TravelStoriesService_DeleteTravelStory_Handler,
		},
		{
			MethodName: "ListTravelStory",
			Handler:    _TravelStoriesService_ListTravelStory_Handler,
		},
		{
			MethodName: "GetTravelStory",
			Handler:    _TravelStoriesService_GetTravelStory_Handler,
		},
		{
			MethodName: "AddCommment",
			Handler:    _TravelStoriesService_AddCommment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _TravelStoriesService_ListComments_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _TravelStoriesService_AddLike_Handler,
		},
		{
			MethodName: "CountStories",
			Handler:    _TravelStoriesService_CountStories_Handler,
		},
		{
			MethodName: "CountLikes",
			Handler:    _TravelStoriesService_CountLikes_Handler,
		},
		{
			MethodName: "CountComments",
			Handler:    _TravelStoriesService_CountComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "travel_stories.proto",
}
